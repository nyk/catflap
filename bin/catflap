#!/usr/bin/env ruby
$:.unshift File.expand_path("../../lib", __FILE__)

require "optparse"
require "catflap/cli"

# Parse options
options = {}
optparse = OptionParser.new do |opts|
  opts.banner = ""
  opts.on('-f', '--config-file <filepath>', String, 'Use config file to override default values') do |filepath|
    options[:config_file] = filepath
  end
  opts.on('-V', '--version', 'Display the version of catflap') do
    options[:version] = true
  end
  opts.on('-n', '--noop', 'Do not run the operation on firewall - no operation') do
    options[:noop] = true
  end
  opts.on('-v', '--verbose', 'Display additional information to screen') do
    options[:verbose] = true
  end
  opts.on('-h', '--help', 'Print this help page.') do
    puts "Usage: catflap <command> [<arg>]\n\n"
    puts "Commands:"
    puts "\tstart \t\t\t Start the catflap server"
    puts "\tstop \t\t\t Stop the catflap server"
    puts "\trestart \t\t Stop and restart the catflap server"
    puts "\treload \t\t\t Reload the pass phrases without restarting the server"
    puts "\tstatus \t\t\t Display the status of the catflap server"
    puts "\tinstall \t\t Install and initialize the catflap rule chain"
    puts "\tuninstall \t\t Uninstall catflap rules from firewall"
    puts "\tcheck <ip> \t\t Check if <ip> already has access"
    puts "\tgrant <ip> \t\t Add <ip> to allow access"
    puts "\trevoke <ip> \t\t Remove access for <ip>"
    puts "\tpurge \t\t\t Remove all catflap managed access grants"
    puts "\tbulkload <filename> \t Bulk load a list of IP access grants from file"
    puts "\tlist \t\t\t Display a list of all catflap managed access grants"
    puts opts
    exit 0
  end
end.parse! ARGV # the options are stripped from ARGV after parsing.
command, arg = ARGV # destructure what is left.

cli = CatflapCli.new options # create and initialize a command line controller object.

begin
  status = cli.dispatchCommands command, arg # pass command and arg to command dispatcher.
  if command == 'check'
    if status
      puts "The ip '#{arg}' has access GRANTED"
    else
      puts "The ip '#{arg}' does NOT have access"
    end
  end

rescue Resolv::ResolvError => err
  $stderr.puts "Malformed IP address error: " << err.message
rescue Psych::SyntaxError => err
  $stderr.puts "There is a YAML syntax error in your catflap config file: #{err.message}"
rescue ArgumentError => err
  $stderr.puts "Missing argument error: " << err.message
rescue IOError => err
  $stderr.puts "File error: #{err.message}"
rescue NameError => err
  $stderr.puts "Command unknown error: " << err.message
rescue StandardError => err
  $stderr.puts "There was an error: " << err.message
end
