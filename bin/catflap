#!/usr/bin/env ruby
$LOAD_PATH.unshift File.expand_path('../../lib', __FILE__)

require 'optparse'
require 'catflap/command'

# Parse options
options = {}
OptionParser.new do |opts|
  opts.banner = ''
  opts.on('-d', '--daemonize', 'Run services as background processes') do
    options[:daemonize] = true
  end
  opts.on('-f', '--config-file <filepath>', String, 'Use config file' \
    ' to override default values') do |filepath|
    options[:config_file] = filepath
  end
  opts.on('-V', '--version', 'Display the version of catflap') do
    options[:version] = true
  end
  opts.on('-n', '--noop', 'Do not run destructive operations on firewall') do
    options[:noop] = true
  end
  opts.on('-s', '--https', 'Use HTTPS/SSL to start or manage service') do
    options[:https] = true
  end
  opts.on('-v', '--verbose', 'Display additional information to screen') do
    options[:verbose] = true
  end
  opts.on('-h', '--help', 'Print this help page.') do
    puts "Usage: catflap <command> [<arg>]\n\n"
    puts 'Commands:'
    puts "\tstart \t\t\t Start a catflap server"
    puts "\tstop \t\t\t Stop a catflap server"
    puts "\trestart \t\t\t Restart a catflap server"
    puts "\treload \t\t\t Reload the pass phrases without restarting the server"
    puts "\tstatus \t\t\t Display the status of a catflap server"
    puts "\tinstall \t\t Install and initialize the catflap rule chain"
    puts "\tuninstall \t\t Uninstall catflap rules from firewall"
    puts "\tcheck <ip> \t\t Check if <ip> already has access"
    puts "\tgrant <ip> \t\t Add <ip> to allow access"
    puts "\trevoke <ip> \t\t Remove access for <ip>"
    puts "\tpurge \t\t\t Remove all catflap managed access grants"
    puts "\tbulkload <filename> \t Bulk load a list of IPs from file"
    puts "\tlist \t\t\t Display a list of all catflap managed access grants"
    puts opts
    exit 0
  end
end.parse! ARGV # the options are stripped from ARGV after parsing.
command, arg = ARGV # destructure what is left into a command and its arguments.

cli = CfCommand.new options

begin
  # pass command and arg to command dispatcher.
  status = cli.dispatch_commands command, arg

  puts status if command == 'version'

  if command == 'check'
    if status
      puts "The ip '#{arg}' has access GRANTED"
    else
      puts "The ip '#{arg}' does NOT have access"
    end
  end

  if command == 'status'
    if status[:pid] > 0
      puts "Server listening on #{status[:address]}:#{status[:port]}" \
        " <pid:#{status[:pid].to_s.chomp}>"
    else
      puts "Server is not running on #{status[:address]}:#{status[:port]}"
    end
  end

rescue Resolv::ResolvError => err
  warn 'Malformed IP address error: ' << err.message
rescue Psych::SyntaxError => err
  warn 'There is a YAML syntax error in your config file: ' << err.message
rescue ArgumentError => err
  warn 'Missing argument error: ' << err.message
rescue IOError => err
  warn 'File error: ' << err.message
rescue NameError => err
  warn 'Command unknown error: ' << err.message
rescue StandardError => err
  warn 'There was an error: ' << err.message
end
